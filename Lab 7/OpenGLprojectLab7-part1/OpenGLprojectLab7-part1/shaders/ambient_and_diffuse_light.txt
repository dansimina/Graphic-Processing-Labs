//vertex shader for ambient and diffuse lighting
#version 410 core

layout(location=0) in vec3 vPosition;
layout(location=1) in vec3 vNormal;

//matrices
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat3 normalMatrix;

//lighting
uniform vec3 lightDir;
uniform vec3 lightColor;
uniform vec3 baseColor;

out vec3 color;

vec3 ambient;
float ambientStrength = 0.2f;
vec3 diffuse;

void main()
{		
	//compute ambient light
	ambient = ambientStrength * lightColor;

	//normalize the light's direction
	vec3 lightDirN = normalize(lightDir);

	//compute eye coordinates for normals
	vec3 normalEye = normalize(normalMatrix * vNormal);

	//compute diffuse light
	diffuse = max(dot(normalEye, lightDirN), 0.0f) * lightColor;

	//compute final vertex color
	color = min((ambient + diffuse) * baseColor, 1.0f);

	//transform vertex
	gl_Position = projection * view * model * vec4(vPosition, 1.0f);
}
